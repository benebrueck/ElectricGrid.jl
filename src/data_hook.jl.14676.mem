        - using ReinforcementLearning
        - using DataFrames
        - using UnicodePlots
        - 
        - include(srcdir("plotting.jl"))
        - 
        - Base.@kwdef mutable struct DataHook <: AbstractHook
        - 
        -     save_data_to_hd = false
        -     dir = "episode_data/"
        -     A = nothing
        -     B= nothing
        -     collect_state_paras = nothing
        - 
        -     collect_sources = []
        -     collect_cables = []
        -     collect_loads = []
        - 
        - 
        -     collect_state_ids = []
        -     collect_next_state_ids = []
        -     collect_action_ids = []
        - 
        -     df = DataFrame()
        -     tmp = DataFrame()
        -     ep = 1
        - 
        -     plot_rewards = false
        -     rewards::Vector{Float64} = Float64[]
        -     reward::Float64 = 0.0
        - 
        -     save_best_NNA = false
        -     bestNNA = nothing
        -     bestreward = -1000000.0
        -     bestepisode = 0
        -     currentNNA = nothing
        - 
        -     collect_reference = false
        - 
        - end
        - 
        - function (hook::DataHook)(::PreExperimentStage, agent, env)
        - 
        -     # rest
        -     #hook.df = DataFrame()
        -     #hook.ep = 1
        0     for source_id in hook.collect_sources
        0         indizes = findall(x -> occursin("_f$source_id"*"_", x) ||occursin("_$source_id"*"_", x) || endswith(x , "_f$source_id") || endswith(x , "_$source_id"), env.state_ids)
        0         for id in indizes
        0             if !(env.state_ids[id] in hook.collect_state_ids)
        0                 push!(hook.collect_state_ids,env.state_ids[id])
        -             end
        0         end
        0     end
        - 
        0     for cable_id in hook.collect_cables
        0         indizes = findall(x ->occursin("i_cable$cable_id"*"_", x) || x == "i_cable$cable_id", env.state_ids)
        0         for id in indizes
        0             if !(env.state_ids[id] in hook.collect_state_ids)
        0                 push!(hook.collect_state_ids,env.state_ids[id])
        -             end
        0         end
        0     end
        - 
        0     for load_id in hook.collect_loads
        0         indizes = findall(x -> occursin("_load$load_id"*"_", x) || endswith(x , "_load$load_id"), env.state_ids)
        0         for id in indizes
        0             if !(env.state_ids[id] in hook.collect_state_ids)
        0                 push!(hook.collect_state_ids,env.state_ids[id])
        -             end
        0         end
        0     end
        - 
        -     
       48     hook.A,hook.B ,_ ,_ = get_sys(env.nc)
        0     hook.collect_state_paras = get_state_paras(env.nc)
        - 
        0     if hook.save_best_NNA && hook.currentNNA === nothing
      400         hook.currentNNA = deepcopy(agent.policy.behavior_actor)
      992         hook.bestNNA = deepcopy(agent.policy.behavior_actor)
        -     end
        - end
        - 
        - function (hook::DataHook)(::PreActStage, agent, env, action)
        - 
  3072000     insertcols!(hook.tmp, :episode => hook.ep)
  3840000     insertcols!(hook.tmp, :time => Float32(env.t))
        - 
        0     if hook.collect_reference
        -         #insertcols!(hook.tmp, :reference => reference(env.t))
        0         refs = reference(env.t)
        0         for i = 1:length(refs)
        0             insertcols!(hook.tmp, "reference_$i" => refs[i])
        0         end
        -     end
        - 
        0     states_x = Vector( env.x )
        0     opstates=(hook.A * states_x + hook.B * (Vector(env.action)) ) .* (hook.collect_state_paras)
        - 
        0     for state_id in hook.collect_state_ids
        0         state_index = findfirst(x -> x == state_id, env.state_ids)
        - 
        0         insertcols!(hook.tmp, state_id => (env.x[state_index]))
        0         insertcols!(hook.tmp, "op_$state_id" => opstates[state_index,1])
        0     end 
        - 
        0     for action_id in hook.collect_action_ids
        0         action_index = findfirst(x -> x == action_id, env.action_ids)
        - 
        0         insertcols!(hook.tmp, action_id => (env.action[action_index]))
        0     end
        -     
  3839968     insertcols!(hook.tmp, :action => Ref(action))
        -     
        - end
        - 
        - function (hook::DataHook)(::PostActStage, agent, env)
        - 
        0     for state_id in hook.collect_next_state_ids
        0         state_index = findfirst(x -> x == state_id, env.state_ids)
        - 
        0         insertcols!(hook.tmp, ("next_state_" * state_id) => (env.state[state_index] * env.norm_array[state_index]))
        0     end
        - 
  3072000     insertcols!(hook.tmp, :reward => env.reward)
  3072000     insertcols!(hook.tmp, :done => env.done)
        - 
  1536000     append!(hook.df, hook.tmp)
 31488000     hook.tmp = DataFrame()
        -     
  2303984     hook.reward += env.reward
        - end
        - 
        - function (hook::DataHook)(::PostEpisodeStage, agent, env)
        - 
        0     if length(hook.rewards) >= 1 && hook.reward > maximum(hook.rewards)
        0         if hook.save_best_NNA
     1344             copyto!(hook.bestNNA, agent.policy.behavior_actor)
        -         end
        0         hook.bestepisode = hook.ep
      352         hook.bestreward = hook.reward
        -     end
        - 
        0     hook.ep += 1
        - 
     1904     push!(hook.rewards, hook.reward)
        0     hook.reward = 0
        - 
        0     if hook.save_best_NNA
     5056         copyto!(hook.currentNNA, agent.policy.behavior_actor)
        -     end
        - 
        - end
        - 
        - function (hook::DataHook)(::PostExperimentStage, agent, env)
        - 
        0     if hook.save_data_to_hd
        0         isdir(hook.dir) || mkdir(hook.dir)
        0         Arrow.write(hook.dir * "data.arrow", hook.df)
        -     end
        - 
        0     if hook.plot_rewards
        0         println(lineplot(hook.rewards, title="Total reward per episode", xlabel="Episode", ylabel="Score"))
        -     end
        - 
        - end
